$ git config --global user.email "your_email@example.com

https://help.github.com

Remote vs. Origin
=================
remote is a git term for an upstream repository
'origin' is just a local alias for referencing some specific remote repo.  The name could have been anything, though git defaults to this name. 

	example config file:

[remote "origin"]
        url = <some_url>.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
        remote = origin
        merge = refs/heads/main

First section defines the alias and its location.
Second section defines a branch and which upstream repo to use for that branch. When you `git push` from the main branch, git will know to use origin as the repo.

See all your remotes:
$ git remote -v

$ git status
may report that you're in sync with the remote but that might be because it doesn't know yet what changes have taken place

$ git fetch origin
downloads new data from a remote repository, but does not merge them
use this in order to get current results from the git status 


Global gitignore
================
$ git config --global core.excludesfile
	will show you which file if any is configured as a global .gitignore


Aliases to simplify looking at branches
=======================================
$ git config --global -e 

[alias]
        lg = log --graph --oneline --decorate
        lga = log --graph --oneline --decorate --all
        lol = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative
        lola = !git lol --all && 0


CREATE LOCAL DIR BEFORE CLONE?
=============================
Cloning will create a parent directory for the repo, inside of which there will be the .git repo, and the working files
Navigate to the parent directory of your choice, to execute:

$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
	this will create a directory whose name is the repo you're cloning.

RENAME A REPO
Rename on github, then re-clone on the local.

MERGING
=======
Merge changes on github to local repo

$ git pull
	https://git-scm.com/docs/git-pull

""" (https://stackoverflow.com/questions/8746631/what-happens-when-i-do-git-pull-origin-master-in-the-develop-branch)
	git pull origin master
pulls the master branch from the remote called origin into your current branch. It only affects your current branch, not your local master branch.
essentially a combination of 
	git fetch
and
	git merge
"""

BRANCHES
========

Create, Delete, and Reflog (rescue) Branch
------------------------------------------
$ git branch
	returns a list of branches
	
$ git -d a-specific-branch
	will delete it. You might need to override complaint using -D instead of -d

	Deleted a branch that wasn't merged?
$ git reflog
	then, find the SHA1 for the commit at the tip of your deleted branch, then just 
$ git checkout [sha]
	And once you're at that commit, you can just git checkout -b [branchname] to recreate the branch from there.

Track a Remote Branch
---------------------
$ git branch --set-upstream-to origin/<branchname>
	or when doing the first push
$ git push -u origin <branchname>

you can confirm this via 
$ cat .git/config

FIX WRONG EMAIL USERNAME
(from https://www.git-tower.com/learn/git/faq/change-author-name-email)

run this from prompt
$ git filter-branch --env-filter '
WRONG_EMAIL="wrong@example.com"
NEW_NAME="New Name Value"
NEW_EMAIL="correct@example.com"

if [ "$GIT_COMMITTER_EMAIL" = "$WRONG_EMAIL" ]
then
    export GIT_COMMITTER_NAME="$NEW_NAME"
    export GIT_COMMITTER_EMAIL="$NEW_EMAIL"
fi
if [ "$GIT_AUTHOR_EMAIL" = "$WRONG_EMAIL" ]
then
    export GIT_AUTHOR_NAME="$NEW_NAME"
    export GIT_AUTHOR_EMAIL="$NEW_EMAIL"
fi
' --tag-name-filter cat -- --branches --tags

(Note: if you get a warning about a backup already existing, add the flag -f after filter-branch)

THEN

$ git push --force --tags origin 'refs/heads/*'
	(from https://help.github.com/articles/changing-author-info/)


this might be useful
https://gist.github.com/carlosmcevilly/2221249

