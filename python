Resources
=========
http://www.diveintopython.net

- Importing Modules
- Reversing a list
- list slicing
- Mutable vs. Immutable
- Name binding on Mutables
- Pass by Reference, Value, Object Reference
- Introspection: methods on object
- Python Interpreter History
- quick dictionary
- comparing types
- Outlook emails
- datastamped copy of file
- string representing now down to minute
- managing python packages
- json vs dictionaries
- enumerate vs. iter
- generator vs. iterator
- list comprehensions
- Other comprehensions
- counting elements in lists
- starred expressions
- environment and interpreter
- evaluation order
- colored text in terminal



Importing
=========

#some_script.py
def add_two ( x, y):
	return x+y
print ( add_two (8, 12) )
#end of some_script.py

$ python
>>> import some_script # omit the "py", it's being treated as a module, not a filename; this will run the script
20
>>> some_script.add_two(13,22)
35
>>> add_two(13,22)    $ but you have to fully qualify any names in that script, as done correctly above
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'add_two' is not defined

$ python
>>> from some_script import add_two
20
>>> add_two
<function add_two at 0x10ba63950>
>>> add_two(23,23)
46

$ python
>>> from some_script import add_two as add2
20
>>> add_two (12,23)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'add_two' is not defined
>>> add2 (12,23)
35




Reversing a list in place or in new list
========================================
>>> L =[ "one", 2, "three"]
>>> L
['one', 2, 'three']
>>> L.reverse() #reverses in place
>>> L
['three', 2, 'one']
>>> 
>>> L =[ "one", 2, "three"]
>>> L[::-1]     #returns new list
['three', 2, 'one']
>>> L
['one', 2, 'three']
>>> K = L[::-1]
>>> K
['three', 2, 'one']
>>> L =[ "one", 2, "three"]
>>> K = list(reversed(L))   #new list
>>> K
['three', 2, 'one']


List Slicing
============
>>> x = [0,1, 'world']
>>> x 
[0, 1, 'world']
>>> x[0:2] = ['hello']      # 0th pointer is right before the 0th element, and 1th pointer is right before 1st elemetn
>>> x                       # so 0:2 grabs the 0th and 1st elements. (0:1 would be only one element) 2-0 = 2 (2 elements)
['hello', 'world']

>>> x = [0,1, 'world']
>>> x
[0, 1, 'world']
>>> x[0:2] = [ 'hello'] * 2 
>>> x
['hello', 'hello', 'world']

>>> x = [0,1, 'world']
>>> x
[0, 1, 'world']
>>> x[0:2] = [9] *2         # [9] is a list (which is iterable)
>>> x
[9, 9, 'world']

>>> x = [0,1, 'world']
>>> x
[0, 1, 'world']
>>> x[0:2] = 'hello'        # again selects the first two elements, this time replacing them with an iterable from 'hello'
>>> x
['h', 'e', 'l', 'l', 'o', 'world']

>>> x = [0,1, 'world']
>>> x
[0, 1, 'world']
>>> x[0:2] = 9              # 9 is an object, it is not iterable
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only assign an iterable


Mutable vs. Immutable
=====================

x = 10
y = x
id(x) == id(y)
id(y) == id(10)
x = x+1   # because "10" is immutable, this changes x to point to "11" (also immutable), while y still points to "10"
print x, y
id(x)==id(y)    # no longer the same reference
id(x)==id(10)   # no longer the same reference
id(y)==id(10)   # these are the same reference
id(x)==id(11)   # these are the same refernece

m = list( [1,2,3,4,5])
n = m ; print "length is ", len(m)
print "are they the same object? ",; id(m)==id(n)
m.pop() # because the list is mutable, this changes the list object rather than change the reference (to an object)
print "m==n returns",  m == n, ",", ; print "length is ", len(m)  # which makes both n, m be identical again

Since everything in Python is an Object, every variable holds an object instance. When an object is initiated, it is assigned a unique object id. 

Simple put, a mutable object can be changed after it is created, and an immutable object can't. Objects of built-in types like (int, float, bool, str, tuple, unicode) are immutable. Objects of built-in types like (list, set, dict) are mutable. Custom classes are generally mutable.

Objects of built-in types like (int, float, bool, str, tuple, unicode) are immutable. Objects of built-in types like (list, set, dict) are mutable. Custom classes are generally mutable. 

Immutable objects are fundamentally expensive to “change”, because doing so involves creating a copy. Changing mutable objects is cheap.

https://medium.com/@meghamohan/mutable-and-immutable-side-of-python-c2145cf72747

More on name binding on mutable objects
=======================================

>>> a = [ [1,2,3] , [4,5,6] ]
>>> for item in a:              # here we are binding the new name "item" to objects that make up the iterable list "a"
...     print item, id(item)
... 
[1, 2, 3] 4512492216      # the name "item" is bound to the same object that a[0] (or later in the loop, a[1]) are bound
[4, 5, 6] 4512613080
>>> id(a[0])
4512492216                # this is the same object as the object that "item" name was bound to
>>> id(a[1])
4512613080

>>> for item in a:
...     item = 3                # this rebinds the name "item" to 3, which means "item" is now pointing to object "3"
...     print item, id(item)    # but that does nothing to modify the list "a".
... 
3 140518349624408               # brand new object "3" 
3 140518349624408
>>> a                           # while the list hasn't changed
[[1, 2, 3], [4, 5, 6]]
 
>>> for item in a:                  # will "item" bound to a list element like a[0] mutate the a[0] object 
...     item = ['apple', 'peach']   # when "item" is rebound to a new list?
...     print item, id(item)
... 
['apple', 'peach'] 4512613296       # a new object gets created for this list of strings, and both occurences of "item" 
['apple', 'peach'] 4512613296       # in the loop point (bind) to that object
>>> a
[[1, 2, 3], [4, 5, 6]]              # but they were rebinds of the name "item" so they did not affect the original list "a".

>>> for item in a:
...     item[:] = ['apple', 'peach']    # rather than rebind "item", here we take the object pointed TO and slice it
...     print item, id(item)            # we are the 0th and 1st list elements from pointing to the 3 elements
...                                     # to now point to two other elements.
['apple', 'peach'] 4512492216
['apple', 'peach'] 4512613080
>>> a
[['apple', 'peach'], ['apple', 'peach']]    #... thereby changing the list "a" itself.
>>> id(a[0])
4512492216
>>> id(a[1])
4512613080

Now for immutable objects (tuples), inside a mutable object (a list)

>>> b = [ (1,2,3) , (4,5,6) ]
>>> for item in b:
...     print item, id(item)
... 
(1, 2, 3) 4512337184
(4, 5, 6) 4512529056
>>> for item in b:
...     item = 3                # rebinding of name "item"
...     print item, id(item)
... 
3 140518349624408
3 140518349624408
>>> b
[(1, 2, 3), (4, 5, 6)]
>>> for item in b:
...     item = (7,8,9)          # rebinding of name "item" (but no attempt to change the object pointed at by b[0], b[1]
...     print item, id(item)
... 
(7, 8, 9) 4512529296
(7, 8, 9) 4512529296
>>> b
[(1, 2, 3), (4, 5, 6)]          # which leaves b the same.



>>> for item in b:
...     item[:] = (7,8,9)       # tuples are immutable, we cannot mutate a tuple from (1,2,3) to become (7,8,9)
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: 'tuple' object does not support item assignment

>>> for count, item in enumerate(b):
...     b[count] = (7,8,9)      # this is a rebinding of an element in a list. In the list b[count] can be made to point to a new tuple
                                # very explicitly modifying the list here, we're not using "item"
...     print b[count], id(b[count])
... 
(7, 8, 9) 4512529296
(7, 8, 9) 4512529296
>>> b
[(7, 8, 9), (7, 8, 9)]          # ...which is why the list of tuples has been MODIFIED, but we haven't modified any tuples yet

>>> for count, item in enumerate(b):
...     for changeCount, newValue in enumerate( (10,11,12)):  #the function enumerate gets one argument which is a tuple, no second optional argument
...             b[count][changeCount] = newValue              #here we attempt to mutate the object pointed at 
...             print newValue, id(b[count][changeCount])     
... 
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
TypeError: 'tuple' object does not support item assignment    #but even though you can make a list element b[0] point to a brand new tuple (7,8,9) as done above,
                                                              #you cannot make the tuple's 0th element b[0][0] point to a new object

This also shows the immutability:
>>> b[0]
(7, 8, 9)
>>> b[0][0]
7
>>> b[0][0] = 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

>>> for changeCount , newValue in enumerate ( (10,11,12) ):   # for clarity on what this line attempted
...     print changeCount, newValue
... 
0 10
1 11
2 12


Pass by Reference, by Value, and by Object (Reference)
======================================================

if you pass a parameter to a function, it is passed by object reference, that is the reference to the object itself (and not the reference to the variable)
For example,

def incrementNumber(n):
    print n
    print id(n)
    n = n+1
    print n
    print id(n)
n = 5
incrementNumber(n)
print n         # this is 5, not 6, because 5 is immutable, so inside the function a new object (the number 6) was created

def ref_demo(x):
    print "x=",x," id=",id(x)
    x=42
    print "x=",x," id=",id(x)

x = 9
id(x)
ref_demo(x)
id(x)

Also see:
https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/
http://foobarnbaz.com/2012/07/08/understanding-python-variables/
https://www.quora.com/What-is-the-pointer-in-Python-Does-a-pointer-exist-in-Python


What methods are available for an object?
=========================================

methodList = [method for method in dir(object) if callable(getattr(object, method))]
    where object is your object
ex. 
x = [2,3,4]
xlist = [method for method in dir(x) if callable(getattr(x, method))]
    
http://www.diveintopython.net/power_of_introspection/index.html


View History in Python Interpreter
==================================
import readline
for i in range(readline.get_current_history_length()):
    print readline.get_history_item(i + 1)

or (1 liner)
import readline; print '\n'.join([str(readline.get_history_item(i)) for i in range(readline.get_current_history_length())])
p3.7:
import readline; print ('\n'.join([str(readline.get_history_item(i)) for i in range(readline.get_current_history_length())]))
https://stackoverflow.com/questions/6558765/how-do-you-see-the-entire-command-history-in-interactive-python


Need a quik dictionary for some experiments?
============================================
>>>d = {k: random.random() for k in range(100)}
>>>type(d)
<type 'dict'>


Comparing Types
===============
if you want to a class and subclass instances to show as same type, use isinstance 
https://docs.quantifiedcode.com/python-anti-patterns/readability/do_not_compare_types_use_isinstance.html
https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance

Check if an object is derived from a dictionary or a tuple etc even though its type doesn't show as such:
>>> from sklearn.datasets import load_iris
>>> iris = load_iris()
>>> print (type ( iris) )
<class 'sklearn.utils.Bunch'>
>>> print (isinstance(iris, dict))
True
>>> print (isinstance(iris, tuple))
False




You need a list of comma separated emails and you have a copy of addresses from Outlook
=======================================================================================
# copy from outlook will be semi-colon separated string in this format: first last <first.last@company.com> ; etc.
>>>a = input("Paste the copy from Outlook here: ") 

>>>b = a.split(";")
>>>c = ' , '.join([  b[i][ b[i].find("<")+1 : b[i].find(">") ] for i in range(len(b))   ])


You need to make a date-stamped backup of a file before using it
================================================================

import datetime
from pathlib import Path

ARCHIVE_DIR  = "Test-Backup"
original_file_name = "test-tes.docx"

filepath = Path.cwd()

# to move the file
(filepath / original_file_name ).rename(filepath / ARCHIVE_DIR /original_file_name)

# OR, to move the file and append a the timestamp
this_moment = datetime.datetime.now()
new_file_name = original_file_name + "__"+str(this_moment).replace(" ", "_").replace(":", "-")
(filepath / original_file ).rename(filepath / ARCHIVE_DIR / new_file_name )


You need a string that represents now but only down to the minute
=================================================================
>>> from datetime import datetime
>>> now = datetime.now()
>>> print ( str(now.replace (microsecond = 0, second = 0)))
2019-10-13 21:32:00


Managing Python Packages
========================

#this lists all the packages that are outdated, excluding the heading "Package" and the underline "----"
#using pip 18.0 from /Library/Python/2.7/site-packages/pip (python 2.7)
pip list --outdated | awk '{ print $1 }' | grep -vwE "(----|Package)"

pip install $(pip list --outdated | awk '{ print $1 }' | grep -vwE "(----|Package)") --upgrade

#sudo .. (this might be needed)
sudo pip install $(pip list --outdated | awk '{ print $1 }' | grep -vwE "(----|Package)") --upgrade



#to see information about each module. Use --verbose also
pip show $(pip list  | awk '{ print $1 }' | grep -vE "(----|Package)" ) | less


JSON vs. Dictionaries
=====================

Not the same. JSON is a format that serializes/represents structured data as a string. A dictionary is structured data. 
https://www.reddit.com/r/learnpython/comments/4izfn9/dicts_vs_json/


Enumerate() and Iter()
======================
https://www.programiz.com/python-programming/iterator
https://www.geeksforgeeks.org/enumerate-in-python/

Iter() creates iteratOR objects from iterABLE objects
next() returns the next item from the iteratOR
(for-loops also create iterator objects)

enumerate() creates an enumerate object from iteratABLE objects
next() returns the next enumeratED object

>> a = ['one', 'two', 3, 'four']
>>> for i in a:
...     print i
... 
one
two
3
four


#Using iter() and next()
>>> c = iter(a)
>>> c
<listiterator object at 0x1014ec110>
>>> next(c)
'one'
>>> next(c)
'two'
>>> next(c)
3
>>> next(c)
'four'
>>> next(c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

#Using enumerate() and next()
>>> b = enumerate(a)
>>> b
<enumerate object at 0x1014e34b0>
>>> next(b)
(0, 'one')
>>> next(b)
(1, 'two')
>>> next(b)
(2, 3)
>>> next(b)
(3, 'four')
>>> next(b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

#iter() in for loops
>>> for i in iter(a):
...     print i
... 
one
two
3
four

#enumerate in for loops
>>> for i in enumerate(a):
...     print i
... 
(0, 'one')
(1, 'two')
(2, 3)
(3, 'four')
>>> for counter, value in enumerate(a):
...     print counter, value
... 
0 one
1 two
2 3
3 four
>>> for i in enumerate(a, 1000):        # reset the counter
...     print i
... 
(1000, 'one')
(1001, 'two')
(1002, 3)
(1003, 'four')

Generator vs. Iterator
======================
All generators are iterators but not all iterators are generators.
Main advantage of generators is that (a) you don't have to calculate the entire iterable ahead of
time (and thus you can have an infinite iterable, WHILE (b) you can easily create the iterable
through a function syntax rather than via creating/instantiating a class.

"""Iterators are objects that have an __iter__ and a __next__ (next in Python 2) method.
Generators provide an easy, built-in way to create instances of Iterators."""
https://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators

>>> def get_generator():   
...     object_state = 1    # this object will maintain internal property/state
...     while True:
...             yield object_state      # yields a value every time we call next on the object 
...             object_state += 1       # this will be executed the next time next is called
... 
>>> g = returns_generator()
>>> type(g)
<type 'generator'>
>>> next(g)
1
>>> next(g)
2
>>> next(g)
3



List Comprehensions
===================

    [expression for item in list]
this returns a list - don't forget the square brackets

>>> [x for x in range(20) if x%2 ==0 if x%5==0]
[0, 10]
>>> ["Even" if i%2==0 else "Odd" for i in range(10)]
['Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd']
the variable i exists beyond the end of the comprehension, just like in a for loop

Nested list comprehension:
>>> N = 40
>>> [p for p in range(2,N) if 0 not in [p%d for d in range(2,p)]]   #print prime numbers
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]
http://code.activestate.com/recipes/162479-generating-a-list-of-prime-numbers-in-one-statemen/


https://www.programiz.com/python-programming/list-comprehension#lcvf   (good explanation, vs. lambda, vs. loops)
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://en.wikipedia.org/wiki/List_comprehension (for more information/references on List Comprehensions)

Other comprehensions
====================
>>> {p for p in range(2,N) if 0 not in [p%d for d in range(2,p)] }					# set comprehension
{2, 3, 5, 37, 7, 11, 13, 17, 19, 23, 29, 31}
>>> {p : round(math.sqrt(p),2) for p in range(2,N) if 0 not in [p%d for d in range(2,p)] } 		# dict comprehension
{2: 1.41, 3: 1.73, 5: 2.24, 7: 2.65, 11: 3.32, 13: 3.61, 17: 4.12, 19: 4.36, 23: 4.8, 29: 5.39, 31: 5.57, 37: 6.08}
# For tuple comprehension, there is only a workaround to product a tuple in comprehension-like fashion
>>> tuple (p for p in range(2,N) if 0 not in [p%d for d in range(2,p)] )				# these two both
>>> tuple([p for p in range(2,N) if 0 not in [p%d for d in range(2,p)] ])				# return tuples


Counting Elements in List
=========================
>>> from collections import Counter
>>> choice = range(1,13)
>>> a = np.random.choice(choice, len(choice), replace = False)
>>> Counter(a)
Counter({5: 1, 12: 1, 7: 1, 6: 1, 2: 1, 11: 1, 9: 1, 1: 1, 3: 1, 4: 1, 8: 1, 10: 1})


Starred Expressions
===================
>>> a = [1,2,3,4]
>>> print (a[0], a[1], a[2], a[3])
1 2 3 4
>>> print (*a)
1 2 3 4
>>> print (a)
[1, 2, 3, 4]
>>> *a
  File "<stdin>", line 1
SyntaxError: can't use starred expression here
>>> print (**a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print() argument after ** must be a mapping, not list

Environment and Interpreter
===========================
https://jakevdp.github.io/PythonDataScienceHandbook/01.02-shell-keyboard-shortcuts.html


Evaluation Order
================

Three Interesting Questions
1. Order of Assignments When There Are Multiple Assignments on One Line
2. Order of Expression Evaluation When There Are Multiple Assignments on One Line
3. Order of Expression Evaluation When Passing Parameters to a Function

1. Assignment Order When There Are Multiple Assignments

>>> a = 3
>>> b = -3
>>> a, b
(3, -3)

>>> a, b = b, a
>>> a,b
(-3, 3)

a. Even though these are immutable objects, only these two objects are needed, therefore python won't create new objects.
Using id(a), and id(b) we can confirm it's the same two referenced objects after the transformation.
b. Python must be creating copies of the object references (note: I didn't say the referenced objects) before 
making any assignments. Why? In case of Left-To-Right assignment, if name:'a' gets rebound to object referenced 
by name:'b', which is the -3), then a --> -3, and b --> -3, so when name:'b' gets rebound to object referenced
by name:'a', b should also be referencing -3. The answer would have been (-3, -3). Similarly for Right-To-Left assignment, 
except in that case the answer would be (3,3).

>>> a = 3
>>> b = -3
>>> a, b = -b, a
>>> a,b
(3, 3)
>>> 
>>> a = 3
>>> b = -3
>>> b, a = a, -b
>>> a,b
(3, 3)
In both cases, the transformations intended are identical: a is to become -(-3) and b is to become 3.
Python acts as if it's doing these transformations in parallel, or most likely holds the object references
as copies and works L2R, rather than dereference each pointer as each pointer is needed.

2. Order of Expression Evaluation When There Are Multiple Assignments

>>> a = [2, 3, 'second pop', 'first pop']

Three assingments that all require evaluation.
A left and a right that operate on list a, and a middle one that totally changes a.

>>> left, a, right = a.pop(), ['so a is now pointing '].append('elsewhere!'), a.pop()
>>> left
'first pop'
>>> a
['so a is now pointing elsewhere ', 'so a is now pointing elsewhere ']
>>> right
'second pop'

So even though there are two a.pop() on the RHS, the rightmost a.pop() results in 'second pop' because
by then the list 'a' had already been popped once and the 'first pop' was no longer there.

Note that inbetween these assignments the list got re-bound to a new list, which also needed to be
evaluated. This assignment, though it appears in between left and right assignments, did not happen before
the other evaluations completed.

Again, python copies object references and works with those.
- we know it's references, because in the case of mutable objects like list 'a', the order of operations matters
- we know it's copies, because the reassignment of 'a' to a new list did not affect either of the two pop(),
which would have been affected if R2L, or L2R.

This is important: if you are mutating a mutable object, the order of evaluation on the RHS is L2R (left to right).
You can avoid surprises by not having multiple assignments on a single line.

"So evaluation of the right-hand side is left-to-right. But the RHS is always evaluated before binding anything to the LHS"
https://stackoverflow.com/questions/29753335/is-python-assignment-strictly-evaluated-right-to-left

N. Are bindings determined only as needed in the process of L2R?

>>> def foo(x):
...     print("foo: received", x, "about to return ", x+3)
...     return x+3

>>> foo(15)
foo: received 15 about to return  18
18

>>> a, b, c, d  = 3, foo(a), foo(b), foo(7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined

>>> d
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'd' is not defined

If python evaluated any expressions before checking _all_ bindings, it would have either 
bound a to 3 (if executing L2R), or bound d to 10 (along with some printing) if R2L.

Also it identifed 'a' as not defined, not 'b' as not defined, consistent with checking the 
bindings L2R.

Therefore, python checks for all bindings to be valid, THEN evaluates expressions on the RHS, 
and FINALLY, rebinds names on the LHS.

In fact, once a is properly bound, then 'b' becomes the problem, while still not a single 
print statement, and not a single assignment . If b had been assigned the value of foo(a), then
b would have been 0, not 'not defined'.

>>> a = -3
>>> a, b, c, d = 3, foo(a), foo(b), foo(7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined


>>> b = a
>>> a, b
(-3, -3)
>>> a, b, c, d = 3, foo(a), foo(b), foo(7)
foo: got -3 about to return  0
foo: got -3 about to return  0
foo: got 7 about to return  10

(confirms that even when all bindings exist, execution and assignment is left to right.
(at least for immutable objects, python first checks the bindings on the RHS in a L2R order)


Python Evaluation (of arguments in a function call)
3. Order of Expression Evaluation When Passing Parameters to a Function

#the pop-from-back-first approach
>>> x = [2,3,4,5,6]
>>> x.pop(-3)
4
>>> x
[2, 3, 5, 6]
>>> x.pop(3)
6
>>> x
[2, 3, 5]

#the pop-from-front-first approach
>>> x = [2,3,4,5,6]
>>> x.pop(3)
5
>>> x
[2, 3, 4, 6]
>>> x.pop(-3)
3
>>> x
[2, 4, 6]

(so this mutable list ends up different depending upon whether you pop-from-back-first 
or pop-from-front-first, even though the set of all operations remains the same)

>>> def foo(x, popx, y, popy):
...     print x
...     print popx
...     print y
...     print popy
...
>>> x = [2,3,4,5,6]
>>> foo (x, x.pop(-3), x, x.pop(3))
[2, 3, 5]
4
[2, 3, 5]
6

#look at the value for x (the list): this tells us all the parameters were executed, before any 
#were lined up to be passed into foo (otherwise, we would have gotten [2,3,4,5,6] at least for the first print

# also, the final value of x, as well as the popped 4 and 6, are consistent
# with the pop-from-front-first case, not the pop-from-back-first case
# which confirms that evaluation is L2R

#python evaluates the arguments to the function from left to right

>>> d = {}
>>> len(d)
0
>>> d['key'] = len(d)
>>> d
{'key': 0}
>>> len(d)
1


Colored Text in Terminal
========================

Various methods. A limited but straightforward module is colorama.
https://pypi.org/project/colorama/

>>> from colorama import init as colorama_init
>>> from colorama import Fore, Back, Style

>>> colorama_init()
>>> BOT_NORMAL = Fore.RESET
>>> INFO_TEXT = Fore.YELLOW
>>> RESET = Style.RESET_ALL

>>> print(BOT_NORMAL)
or
>>> print(f"{BOT_NORMAL}Hello {INFO_TEXT}Info{BOT_NORMAL}")

consider init(autoreset=True) to avoid having to reset color changes at the end of each print statement.
